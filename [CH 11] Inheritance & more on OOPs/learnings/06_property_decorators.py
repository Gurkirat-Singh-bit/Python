# here i learnt property decorators in python

# NOTE : this code is generated by github co-pilot because of some issues with me  

class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name  # Initialize first_name attribute
        self.last_name = last_name    # Initialize last_name attribute

    @property
    def full_name(self):
        # The @property decorator allows us to define a method as a property
        # This means we can access it like an attribute, without parentheses
        return f"{self.first_name} {self.last_name}"  # Return the full name

    @full_name.setter
    def full_name(self, name):
        # The @full_name.setter decorator allows us to define a setter method for the full_name property
        # This means we can set the full_name attribute directly
        first, last = name.split(" ")  # Split the name into first and last
        self.first_name = first        # Set the first_name attribute
        self.last_name = last          # Set the last_name attribute

    @full_name.deleter
    def full_name(self):
        # The @full_name.deleter decorator allows us to define a deleter method for the full_name property
        # This means we can delete the full_name attribute directly
        self.first_name = None  # Delete the first_name attribute
        self.last_name = None   # Delete the last_name attribute

# Create an instance of Person representing your friend's crush
crush = Person("kanika", "kumari")

# Access the full_name property
print(crush.full_name)  # Output: Alice Johnson

# Set the full_name property to a new name
crush.full_name = "kanika sharma"

# Access the updated full_name property
print(crush.full_name)  # Output: kanika sharma

# Delete the full_name property
del crush.full_name

# Access the full_name property after deletion
print(crush.full_name)  # Output: None None